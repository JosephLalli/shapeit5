/*******************************************************************************
 * Copyright (C) 2022-2023 Olivier Delaneau
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

#include "../../versions/versions.h"

#include <utils/xcf.h>
#include <io/haplotype_writer.h>

using namespace std;

haplotype_writer::haplotype_writer(haplotype_set & _H, genotype_set & _G, variant_map & _V, int _nthreads): H(_H), G(_G), V(_V) {
	nthreads = _nthreads;
}

haplotype_writer::~haplotype_writer() {
}


void haplotype_writer::setRegions(int _input_start, int _input_stop) {
	input_start = _input_start;
	input_stop = _input_stop;
}

void haplotype_writer::writeHaplotypes(string fname) {
	tac.clock();

	cout << "ok0.0" << endl;
	//Open XCF writer
	xcf_writer XW(fname, true, nthreads);
	cout << "ok0.1" << endl;
	//Write header
	vector < string > snames;
	cout << "ok0.2 " << G.n_samples << " " << G.names.size() << endl;
	for (int i = 0 ; i < G.n_samples ; i ++) snames.push_back(G.names[i].c_str());
	cout << "ok0.3" << endl;
	XW.writeHeader(snames, V.vec_full[0]->chr, string("SHAPEIT5 phase_rare ") + string(PHASE2_VERSION));

	//Allocate buffers
	cout << "ok0.4" << endl;
	int32_t * output_buffer_GT = (int32_t *) malloc(G.n_samples * 2 * sizeof(int32_t));
	float * output_buffer_PP = (float *) malloc(G.n_samples * 1 * sizeof(float));

	cout << "ok0.5" << endl;

	//Write records
	for (int vt = 0, vc = 0, vs = 0, vr = 0 ; vt < V.sizeFull() ; vt ++) {

		//CASE1: Rare variant
		cout << "ok1" << endl;
		uint32_t vAC = 0;
		if (V.vec_full[vt]->type == VARTYPE_RARE) {
			bool major_allele = !V.vec_full[vt]->minor;
			for (int i = 0 ; i < G.n_samples ; i++) {
				output_buffer_GT[2*i+0] = bcf_gt_phased(major_allele);
				output_buffer_GT[2*i+1] = bcf_gt_phased(major_allele);
				bcf_float_set_missing(output_buffer_PP[i]);
				vAC += 2 * major_allele;
			}
			for (int i = 0 ; i < G.GRvar_genotypes[vr].size() ; i++) {
				bool a0 = G.GRvar_genotypes[vr][i].al0;
				bool a1 = G.GRvar_genotypes[vr][i].al1;
				output_buffer_GT[2*G.GRvar_genotypes[vr][i].idx+0] = bcf_gt_phased(a0);
				output_buffer_GT[2*G.GRvar_genotypes[vr][i].idx+1] = bcf_gt_phased(a1);
				output_buffer_PP[G.GRvar_genotypes[vr][i].idx] = roundf(min(G.GRvar_genotypes[vr][i].prob, 1.0f) * 1000.0) / 1000.0;
				vAC -= 2 * major_allele;
				vAC += a0+a1;
			}
		} else {
			for (int i = 0 ; i < H.n_samples ; i++) {
				bool a0 = H.Hvar.get(vs, 2*i+0);
				bool a1 = H.Hvar.get(vs, 2*i+1);
				output_buffer_PP[2*i+0] = bcf_gt_phased(a0);
				output_buffer_PP[2*i+1] = bcf_gt_phased(a1);
				vAC += a0+a1;
			}
		}
		cout << "ok2" << endl;

		//Variant information
		XW.writeInfo(V.vec_full[vt]->chr, V.vec_full[vt]->bp, V.vec_full[vt]->ref, V.vec_full[vt]->alt, V.vec_full[vt]->id, vAC, G.n_samples * 2);

		cout << "ok3" << endl;

		//Write phased GT and PP in BCF format
		XW.writeRecordGT(RECORD_BCFVCF_GENOTYPE, reinterpret_cast<char*>(output_buffer_GT), 2 * G.n_samples * sizeof(int32_t));

		cout << "ok4" << endl;
		if (V.vec_full[vt]->type == VARTYPE_RARE) XW.writeRecordFloat(RECORD_BCFVCF_GENOTYPE, "PP", reinterpret_cast<char*>(output_buffer_PP), 1 * G.n_samples * sizeof(float));

		cout << "ok5" << endl;

		//Increment
		switch (V.vec_full[vt]->type) {
		case VARTYPE_SCAF :	vs++; break;
		case VARTYPE_RARE :	vr++; break;
		}

		vrb.progress("  * VCF writing", (vt+1)*1.0/V.sizeFull());
	}

	//Close
	free(output_buffer_GT);
	free(output_buffer_PP);
	XW.close();

	//Verbose
	vrb.bullet("BCF writing [N=" + stb.str(G.n_samples) + " / L=" + stb.str(V.sizeFull()) + "] (" + stb.str(tac.rel_time()*0.001, 2) + "s)");

	//Indexing
	vrb.bullet("Indexing ["+fname + "]");
	if (bcf_index_build3(fname.c_str(), NULL, 14, nthreads) < 0) vrb.error("Fail to index file");
}
